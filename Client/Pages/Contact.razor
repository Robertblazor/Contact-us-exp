@page "/contact"
<form>
    <div>
        <label for="name">Name:</label>
        <input type="text" id="name" @bind-value="name" />
        @if (string.IsNullOrWhiteSpace(name))
        {
            <p class="error">Please enter your name.</p>
        }
    </div>
    <div>
        <label for="email">Email:</label>
        <input type="email" id="email" @bind-value="email" />
        @if (string.IsNullOrWhiteSpace(email))
        {
            <p class="error">Please enter your email address.</p>
        }
        else if (!IsValidEmail(email))
        {
            <p class="error">Please enter a valid email address.</p>
        }
    </div>
    <div>
        <label for="message">Message:</label>
        <InputTextArea @bind-Value="message" style=" width: 100%; height: 60vh; min-height: 100px;" />
        @if (string.IsNullOrWhiteSpace(message))
        {
            <p class="error">Please enter a message.</p>
        }
    </div>
    <button type="reset" disabled="@(!IsValidForm() || isLoading)" @onclick="@(async ()=>{await SendEmails();})" >
        @if (isLoading)
        {
            <span class="spinner"></span>
        }
        else if (isSent)
        {
            <span> Message  Sent</span>
        }
        else 
        {
            <span>  Send</span>
        }
    </button>
</form>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <p class="error">@errorMessage</p>
}

@code {
    private string name { get; set; }
    private string email { get; set; }
    private string message { get; set; }
    private bool isLoading { get; set; }
    private bool isSent { get; set; }
    private string errorMessage { get; set; }

    private async Task SendEmails()
    {
        isLoading = true;
        try
        {
            var emailData = new
            {
                Name = name,
                Email = email,
                Message = message
            };
            var client = new HttpClient();
            var response = await client.PostAsJsonAsync("api/SendEmails", new {name, email, message});
            response.EnsureSuccessStatusCode();
            isSent = true;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool IsValidForm()
    {
        return !string.IsNullOrWhiteSpace(name) &&
               !string.IsNullOrWhiteSpace(email) &&
               IsValidEmail(email) &&
               !string.IsNullOrWhiteSpace(message);
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
}

